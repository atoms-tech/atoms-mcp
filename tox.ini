# ============================================================================
# Tox Configuration - Test Automation
# ============================================================================

[tox]
envlist =
    py311
    lint
    typecheck
    security
    docs
isolated_build = True
skipsdist = False

# ============================================================================
# Default Test Environment
# ============================================================================

[testenv]
description = Run unit tests with pytest
deps =
    pytest>=7.4.0
    pytest-asyncio>=0.21.0
    pytest-cov>=4.1.0
    pytest-xdist>=3.3.0
    pytest-mock>=3.11.0
commands =
    pytest {posargs:tests/} \
        --cov=lib \
        --cov=tools \
        --cov=config \
        --cov=server \
        --cov=auth \
        --cov=utils \
        --cov-report=term-missing \
        --cov-report=html \
        --cov-report=xml \
        -v

# ============================================================================
# Linting Environment
# ============================================================================

[testenv:lint]
description = Run code linters (ruff, black)
skip_install = True
deps =
    ruff>=0.8.0
    black>=24.0.0
commands =
    ruff check . {posargs}
    black --check . {posargs}

[testenv:lint-fix]
description = Auto-fix linting issues
skip_install = True
deps =
    ruff>=0.8.0
    black>=24.0.0
commands =
    ruff check --fix . {posargs}
    black . {posargs}

# ============================================================================
# Type Checking Environment
# ============================================================================

[testenv:typecheck]
description = Run type checking with zuban/mypy
deps =
    zuban>=0.1.0
    types-requests
    types-python-dateutil
    types-PyYAML
commands =
    zuban {posargs:.}

# ============================================================================
# Security Environment
# ============================================================================

[testenv:security]
description = Run security checks
skip_install = True
deps =
    bandit[toml]>=1.7.6
    safety>=3.0.0
    pip-audit>=2.6.0
commands =
    bandit -c pyproject.toml -r lib tools config server auth utils {posargs}
    safety check {posargs}
    pip-audit {posargs}

# ============================================================================
# Documentation Environment
# ============================================================================

[testenv:docs]
description = Check documentation coverage
deps =
    interrogate>=1.5.0
commands =
    interrogate -v lib tools config server auth utils {posargs}

# ============================================================================
# Code Quality Environment
# ============================================================================

[testenv:quality]
description = Run code quality checks
deps =
    radon>=6.0.0
    xenon>=0.9.0
    vulture>=2.10.0
commands =
    radon cc lib tools config server auth utils -a -nb
    radon mi lib tools config server auth utils -nb
    xenon --max-absolute B --max-modules A --max-average A lib tools config server auth utils
    vulture lib tools config server auth utils --min-confidence 80

# ============================================================================
# Coverage Environment
# ============================================================================

[testenv:coverage]
description = Generate coverage report
deps =
    pytest>=7.4.0
    pytest-cov>=4.1.0
    coverage>=7.4.0
commands =
    pytest tests/ \
        --cov=lib \
        --cov=tools \
        --cov=config \
        --cov=server \
        --cov=auth \
        --cov=utils \
        --cov-report=term-missing \
        --cov-report=html \
        --cov-report=xml \
        --cov-fail-under=80 \
        -v

# ============================================================================
# Integration Tests Environment
# ============================================================================

[testenv:integration]
description = Run integration tests
setenv =
    ATOMS_MCP_ENVIRONMENT=test
commands =
    pytest tests/integration/ -v {posargs}

# ============================================================================
# Performance Tests Environment
# ============================================================================

[testenv:perf]
description = Run performance benchmarks
deps =
    pytest>=7.4.0
    pytest-benchmark>=4.0.0
commands =
    pytest tests/ -v --benchmark-only {posargs}

# ============================================================================
# Build Environment
# ============================================================================

[testenv:build]
description = Build distribution packages
skip_install = True
deps =
    build>=1.0.3
    twine>=4.0.2
commands =
    python -m build
    twine check dist/*

# ============================================================================
# Clean Environment
# ============================================================================

[testenv:clean]
description = Clean build artifacts and cache
skip_install = True
allowlist_externals =
    rm
    find
commands =
    rm -rf build/ dist/ *.egg-info/
    rm -rf .pytest_cache/ .ruff_cache/ .mypy_cache/
    rm -rf htmlcov/ .coverage coverage.xml
    find . -type d -name __pycache__ -exec rm -rf {{}} +
    find . -type f -name "*.pyc" -delete
