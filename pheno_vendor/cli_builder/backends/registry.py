"""
Backend registry for managing CLI backend implementations.

Provides factory pattern for backend instantiation and discovery.
"""

from typing import Dict, List, Optional, Protocol
from abc import ABC, abstractmethod
import inspect
import textwrap

from cli_builder.core.command import Command, Option


class BackendProtocol(Protocol):
    """Protocol defining the interface for CLI backends."""

    def generate(
        self,
        cli_name: str,
        version: str,
        help: str,
        commands: List[Command],
        global_options: List[Option],
        epilog: Optional[str] = None,
        standalone: bool = True,
    ) -> str:
        """
        Generate CLI code for this backend.

        Args:
            cli_name: Application name
            version: Application version
            help: Application help text
            commands: List of commands
            global_options: Global options available to all commands
            epilog: Additional help text
            standalone: Whether to generate standalone executable

        Returns:
            Generated Python code
        """
        ...


class BaseBackend(ABC):
    """Base class for all backend implementations."""

    @abstractmethod
    def generate(
        self,
        cli_name: str,
        version: str,
        help: str,
        commands: List[Command],
        global_options: List[Option],
        epilog: Optional[str] = None,
        standalone: bool = True,
    ) -> str:
        """Generate CLI code for this backend."""
        pass

    def _generate_imports(self) -> str:
        """Generate import statements."""
        return ""

    def _generate_header(self, cli_name: str, version: str, standalone: bool) -> str:
        """Generate file header with shebang and docstring."""
        header = ""
        if standalone:
            header += "#!/usr/bin/env python3\n"

        header += f'''"""
{cli_name} - CLI Application

Auto-generated by CLI-Builder-Kit
Version: {version}
"""

'''
        return header

    def _is_single_command(self, commands: List[Command]) -> bool:
        """Check if this is a single-command CLI."""
        return len(commands) == 1 and not commands[0].subcommands

    def _get_function_source(self, func) -> str:
        """
        Get clean function source without decorators.

        Args:
            func: Function object

        Returns:
            Function source code without decorators
        """
        try:
            source_lines = inspect.getsourcelines(func)[0]

            # Find the line where the actual function definition starts (def ...)
            func_start = 0
            for i, line in enumerate(source_lines):
                if line.strip().startswith('def '):
                    func_start = i
                    break

            # Get lines from function definition onward
            clean_source = ''.join(source_lines[func_start:])

            # Dedent to remove any leading whitespace
            clean_source = textwrap.dedent(clean_source)

            return clean_source
        except (OSError, TypeError):
            # If we can't get source, return a placeholder
            return f"def {func.__name__}(*args, **kwargs):\n    '''Implementation for {func.__name__}'''\n    pass\n"


class BackendRegistry:
    """
    Registry for managing and discovering CLI backends.

    Implements factory pattern for backend instantiation.
    """

    def __init__(self) -> None:
        self._backends: Dict[str, type[BaseBackend]] = {}
        self._register_builtin_backends()

    def _register_builtin_backends(self) -> None:
        """Register built-in backends."""
        from cli_builder.backends.argparse_backend import ArgparseBackend
        from cli_builder.backends.click_backend import ClickBackend
        from cli_builder.backends.typer_backend import TyperBackend

        self.register("argparse", ArgparseBackend)
        self.register("click", ClickBackend)
        self.register("typer", TyperBackend)

    def register(self, name: str, backend_class: type[BaseBackend]) -> None:
        """
        Register a backend.

        Args:
            name: Backend name (e.g., 'click', 'typer')
            backend_class: Backend class
        """
        self._backends[name.lower()] = backend_class

    def get_backend(self, name: str) -> Optional[BaseBackend]:
        """
        Get a backend instance by name.

        Args:
            name: Backend name

        Returns:
            Backend instance or None if not found
        """
        backend_class = self._backends.get(name.lower())
        if backend_class:
            return backend_class()
        return None

    def list_backends(self) -> List[str]:
        """
        List all registered backend names.

        Returns:
            List of backend names
        """
        return list(self._backends.keys())

    def is_registered(self, name: str) -> bool:
        """
        Check if a backend is registered.

        Args:
            name: Backend name

        Returns:
            True if backend is registered
        """
        return name.lower() in self._backends
