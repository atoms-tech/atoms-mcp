[project]
name = "atoms-mcp"
version = "0.1.0"
description = "Atoms MCP Server - Model Context Protocol server for Atoms workspace management"
requires-python = ">=3.11"
authors = [
    {name = "Atoms Team"},
]
readme = "README.md"
license = {text = "MIT"}

dependencies = [
    "fastmcp>=2.12.2",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "supabase>=2.5.0",
    "psycopg2-binary>=2.9.9",
    "python-dotenv>=1.0.1",
    "google-cloud-aiplatform>=1.49.0",
    "aiohttp>=3.8.0",
    "workos>=1.0.0",
    "PyJWT>=2.8.0",
    "cryptography>=41.0.0",
    "tqdm>=4.66.0",
    "rapidfuzz>=3.10.0",
    "pydantic[email]>=2.11.7,<3.0.0",
    "pydantic-settings>=2.3.0",
    "httpx>=0.28.1,<1.0.0",
    "PyYAML>=6.0",
    "psutil>=5.9.0",
    "typing-extensions>=4.12.2",
    "pheno-sdk @ git+file:///Users/kooshapari/temp-PRODVERCEL/485/kush/pheno-sdk",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "pytest-dependency>=0.5.1",
    "pytest-benchmark>=4.0.0",
    "pytest-watch>=4.2.0",
    "ruff>=0.8.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "coverage>=7.4.0",
    "graphviz>=0.20.1",
    "bandit[toml]>=1.7.6",
    "safety>=3.0.0",
    "types-requests>=2.31.0.0",
    "types-python-dateutil>=2.9.0.20240316",
    "types-PyYAML>=6.0.0",
    "locust>=2.21.0",
    "memory-profiler>=0.61.0",
    "matplotlib>=3.8.0",
    "radon>=6.0.0",
    "xenon>=0.9.0",
    "requests>=2.31.0",
    "importchecker>=2.0",
    "pydeps>=1.12.0",
    "monkeytype>=23.3.0",
    "semgrep>=1.47.0",
    "build>=1.0.3",
    "twine>=4.0.2",
    "pipdeptree>=2.13.0",
    "pip-audit>=2.6.0",
    "pylint>=3.0.0",
    "prospector>=1.10.0",
    "interrogate>=1.5.0",
    "vulture>=2.10.0",
    "zuban>=0.1.0",
]

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["lib", "tools", "schemas", "tests", "config", "server", "auth", "utils"]
package-dir = {"" = "."}

# ============================================================================
# Ruff Configuration - Fast Python Linter & Formatter
# ============================================================================

[tool.ruff]
line-length = 120
target-version = "py311"
extend-exclude = [
    "schemas/generated",
    "archive",
    ".venv",
    "__pycache__",
    "*.pyc",
    ".git",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "PL",     # pylint
    "TRY",    # tryceratops
    "RUF",    # ruff-specific rules
]

ignore = [
    "E501",    # Line too long (handled by formatter)
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "TRY003",  # Avoid specifying long messages outside exception class
    "EM101",   # Exception must not use a string literal
    "EM102",   # Exception must not use an f-string literal
]

[tool.ruff.lint.per-file-ignores]
# Test files
"tests/**/*.py" = [
    "S101",    # Allow assert statements in tests
    "ARG001",  # Allow unused function arguments (fixtures)
    "PLR2004", # Allow magic values in tests
]

# CLI utility scripts
"lib/vendor_manager.py" = ["T201", "S603", "PLR2004"]
"lib/deployment_checker.py" = ["T201", "S603", "S607", "PLR2004"]
"lib/schema_sync.py" = ["T201", "S608", "PLR0912", "PLR0915", "PLR2004"]
"scripts/*.py" = ["T201"]

# Init files - allow unused imports (re-exports)
"**/__init__.py" = ["F401"]

# Generated schemas
"schemas/generated/**/*.py" = ["ALL"]

# Archived code
"archive/**/*.py" = ["ALL"]

[tool.ruff.lint.isort]
known-first-party = ["lib", "tools", "config", "server", "auth", "utils", "schemas"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false

# ============================================================================
# Zuban (MyPy) Configuration - Type Checking
# ============================================================================

[tool.zuban]
mode = "mypy"
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
check_untyped_defs = false
disallow_any_generics = false
no_implicit_optional = false
namespace_packages = true
explicit_package_bases = true
pretty = true
show_error_codes = true
exclude = "(schemas/generated|archive|\\.venv|tests/load)"

[[tool.zuban.overrides]]
module = "pheno.*"
ignore_errors = true

[[tool.zuban.overrides]]
module = "tests.*"
allow_untyped_defs = true
check_untyped_defs = false

# ============================================================================
# Pytest Configuration
# ============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
]

# ============================================================================
# Coverage Configuration
# ============================================================================

[tool.coverage.run]
source = ["lib", "tools", "config", "server", "auth", "utils"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "pheno_vendor/*",
    "schemas/generated/*",
    "archive/*",
    ".venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]
precision = 2
show_missing = true

# ============================================================================
# Black Configuration - Code Formatter
# ============================================================================

[tool.black]
line-length = 120
target-version = ['py311']
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.ruff_cache
  | \.venv
  | pheno_vendor
  | schemas/generated
  | archive
  | build
  | dist
)/
'''

# ============================================================================
# isort Configuration - Import Sorter
# ============================================================================

[tool.isort]
profile = "black"
line_length = 120
skip = ["pheno_vendor", "schemas/generated", "archive", ".venv"]
known_first_party = ["lib", "tools", "config", "server", "auth", "utils", "schemas"]

# ============================================================================
# Bandit Configuration - Security Linter
# ============================================================================

[tool.bandit]
exclude_dirs = ["tests", "pheno_vendor", "lib-sdks", "archive", ".venv"]
skips = ["B101"]  # Don't flag assert statements

# ============================================================================
# Vulture Configuration - Dead Code Detection
# ============================================================================

[tool.vulture]
paths = ["atoms_cli.py", "lib", "config", "server", "scripts"]
exclude = ["pheno_vendor", "lib-sdks", "archive", ".venv", "tests"]
min_confidence = 80
ignore_names = ["main", "cli", "settings"]

# ============================================================================
# UV Configuration - Fast Package Manager
# ============================================================================

[tool.uv]
dev-dependencies = []
constraint-dependencies = []

[tool.uv.sources]

[tool.uv.pip]
# Use system Python
python = "python3.11"
# Use mirrors for faster downloads
index-url = "https://pypi.org/simple"
# Compile wheels when needed
compile-bytecode = true

# ============================================================================
# Interrogate Configuration - Docstring Coverage
# ============================================================================

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["pheno_vendor", "schemas/generated", "archive", ".venv", "tests"]
verbose = 1
quiet = false
whitelist-regex = []
color = true
