[pytest]
asyncio_mode = auto
asyncio_default_fixture_loop_scope = session

# Base options (parallel options passed via CLI)
addopts = -v --tb=short --strict-markers --maxfail=5 --durations=10 --durations-min=2.0

# MCP Auth Plugin - Automatic authentication before test collection
# Handles OAuth flow with progress bar and caches credentials
mcp_auth_enable = true
mcp_auth_provider = authkit
mcp_auth_show_progress = true

# Test discovery paths
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Atoms MCP Test Framework Plugin
# Enables rich progress display, comprehensive reports, and auth validation
#
# CLI Options:
#   --enable-rich-progress     Enable beautiful progress display with live stats
#   --enable-reports           Generate JSON, Markdown, and Matrix reports
#   --validate-auth            Validate OAuth before running tests
#   --continue-on-auth-fail    Continue even if auth validation fails
#
# Example usage:
#   pytest --enable-rich-progress --enable-reports --validate-auth
#   python tests/test_main.py --workers 4 --enable-rich-progress --enable-reports

# Default: Run unit tests only (fast tests < 1s)
# Override with: pytest -m integration  (run integration tests)
# Or: pytest -m "unit or integration"  (run all tests)
# Or: pytest --co  (collect only, no execution)

# Example commands:
# pytest                           # Run unit tests only (default, fast)
# pytest -m unit                   # Explicitly run unit tests
# pytest -m integration            # Run integration tests (requires server)
# pytest -m "unit or integration"  # Run all tests
# pytest -m "not slow"             # Skip slow tests
# pytest tests/unit/               # Run all unit tests in unit/ directory
# pytest tests/integration/        # Run all integration tests
# pytest -n auto                   # Run tests in parallel (requires pytest-xdist)
# pytest --maxfail=1               # Stop after first failure

# Test markers
markers =
    asyncio: Async tests that require asyncio
    unit: Unit tests (fast, no external dependencies, <1s per test)
    integration: Integration tests (require server running, may be slower)
    http: Tests that call MCP via HTTP
    e2e: End-to-end tests (full workflows)
    auth: Tests that require OAuth authentication
    tool: Tests for specific MCP tools
    provider: Tests for specific OAuth providers
    parallel: Tests that can run in parallel
    slow: Tests that take longer than 5 seconds
    skip_if_no_oauth: Skip if OAuth not available
    workspace: Workspace tool tests
    entity: Entity tool tests
    relationship: Relationship tool tests
    workflow: Workflow tool tests
    query: Query tool tests