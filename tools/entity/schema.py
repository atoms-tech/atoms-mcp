"""
Entity schema definitions and validation.

This module provides schema definitions for all entity types using
dataclasses for type safety and validation.

Pythonic Patterns Applied:
- Dataclasses for schema definitions
- Type hints throughout
- Frozen dataclasses for immutable schemas
- Field factories for mutable defaults
- Comprehensive validation
"""

from __future__ import annotations

from dataclasses import dataclass, field
from typing import Any, Dict, FrozenSet, List, Optional


@dataclass(frozen=True)
class EntitySchema:
    """Schema definition for an entity type.
    
    Attributes:
        entity_type: Type of entity (e.g., "project", "document")
        required_fields: Fields that must be provided
        auto_fields: Fields auto-generated by system
        default_values: Default values for optional fields
        relationships: Related entity types
        auto_slug: Whether to auto-generate slug from name
    """
    entity_type: str
    required_fields: FrozenSet[str]
    auto_fields: FrozenSet[str] = field(default_factory=frozenset)
    default_values: Dict[str, Any] = field(default_factory=dict)
    relationships: FrozenSet[str] = field(default_factory=frozenset)
    auto_slug: bool = False
    
    def has_required_field(self, field_name: str) -> bool:
        """Check if field is required."""
        return field_name in self.required_fields
    
    def has_auto_field(self, field_name: str) -> bool:
        """Check if field is auto-generated."""
        return field_name in self.auto_fields
    
    def get_default_value(self, field_name: str) -> Optional[Any]:
        """Get default value for field."""
        return self.default_values.get(field_name)
    
    def validate_required_fields(self, data: Dict[str, Any]) -> List[str]:
        """Validate required fields and return list of missing fields.
        
        Args:
            data: Data to validate
            
        Returns:
            List of missing required field names
        """
        return [
            field for field in self.required_fields
            if field not in data
        ]


# Schema registry using frozen dataclasses
ENTITY_SCHEMAS: Dict[str, EntitySchema] = {
    "organization": EntitySchema(
        entity_type="organization",
        required_fields=frozenset(["name", "slug"]),
        auto_fields=frozenset(["id", "created_at", "updated_at"]),
        default_values={"is_deleted": False, "type": "team"},
        relationships=frozenset(["members", "projects", "invitations"]),
    ),
    
    "project": EntitySchema(
        entity_type="project",
        required_fields=frozenset(["name", "organization_id"]),
        auto_fields=frozenset(["id", "created_at", "updated_at"]),
        default_values={"is_deleted": False},
        relationships=frozenset(["members", "documents", "organization"]),
        auto_slug=True,
    ),
    
    "document": EntitySchema(
        entity_type="document",
        required_fields=frozenset(["name", "project_id"]),
        auto_fields=frozenset(["id", "created_at", "updated_at"]),
        default_values={"is_deleted": False},
        relationships=frozenset(["blocks", "requirements", "project"]),
    ),
    
    "requirement": EntitySchema(
        entity_type="requirement",
        required_fields=frozenset(["name", "document_id"]),
        auto_fields=frozenset(["id", "created_at", "updated_at", "version", "external_id"]),
        default_values={
            "is_deleted": False,
            "status": "active",
            "properties": {},
            "priority": "low",
            "type": "component",
            "block_id": None,
        },
        relationships=frozenset(["document", "tests", "trace_links"]),
    ),
    
    "test": EntitySchema(
        entity_type="test",
        required_fields=frozenset(["title", "project_id"]),
        auto_fields=frozenset(["id", "created_at", "updated_at"]),
        default_values={
            "is_active": True,
            "status": "pending",
            "priority": "medium",
        },
        relationships=frozenset(["requirements", "project"]),
    ),
    
    "user": EntitySchema(
        entity_type="user",
        required_fields=frozenset(["id"]),
        auto_fields=frozenset(["created_at", "updated_at"]),
        default_values={},
        relationships=frozenset(["organizations", "projects"]),
    ),
    
    "profile": EntitySchema(
        entity_type="profile",
        required_fields=frozenset(["id"]),
        auto_fields=frozenset(["created_at", "updated_at"]),
        default_values={},
        relationships=frozenset(["organizations", "projects"]),
    ),
}


def get_entity_schema(entity_type: str) -> Optional[EntitySchema]:
    """Get schema for entity type.
    
    Args:
        entity_type: Type of entity
        
    Returns:
        EntitySchema if found, None otherwise
        
    Examples:
        >>> schema = get_entity_schema("project")
        >>> if schema:
        ...     print(schema.required_fields)
        frozenset({'name', 'organization_id'})
    """
    return ENTITY_SCHEMAS.get(entity_type.lower())


def validate_entity_type(entity_type: str) -> bool:
    """Check if entity type is valid.
    
    Args:
        entity_type: Type to validate
        
    Returns:
        True if valid, False otherwise
        
    Examples:
        >>> validate_entity_type("project")
        True
        >>> validate_entity_type("invalid")
        False
    """
    return entity_type.lower() in ENTITY_SCHEMAS


def get_all_entity_types() -> List[str]:
    """Get list of all valid entity types.
    
    Returns:
        List of entity type names
        
    Examples:
        >>> types = get_all_entity_types()
        >>> "project" in types
        True
    """
    return list(ENTITY_SCHEMAS.keys())


class EntityValidationError(Exception):
    """Raised when entity validation fails."""
    
    def __init__(self, entity_type: str, errors: List[str]):
        self.entity_type = entity_type
        self.errors = errors
        super().__init__(
            f"Validation failed for {entity_type}: {', '.join(errors)}"
        )


def validate_entity_data(
    entity_type: str,
    data: Dict[str, Any],
    operation: str = "create"
) -> None:
    """Validate entity data against schema.
    
    Args:
        entity_type: Type of entity
        data: Data to validate
        operation: Operation type (create, update, etc.)
        
    Raises:
        EntityValidationError: If validation fails
        ValueError: If entity type is invalid
        
    Examples:
        >>> validate_entity_data("project", {"name": "Test", "organization_id": "123"})
        >>> # No exception = valid
        
        >>> validate_entity_data("project", {"name": "Test"})
        Traceback (most recent call last):
        ...
        EntityValidationError: Validation failed for project: Missing required field: organization_id
    """
    if not validate_entity_type(entity_type):
        raise ValueError(f"Invalid entity type: {entity_type}")
    
    schema = get_entity_schema(entity_type)
    if not schema:
        raise ValueError(f"No schema found for entity type: {entity_type}")
    
    errors: List[str] = []
    
    # Check required fields (only for create operations)
    if operation == "create":
        missing = schema.validate_required_fields(data)
        if missing:
            errors.extend(f"Missing required field: {field}" for field in missing)
    
    # Additional validation can be added here
    # - Type checking
    # - Format validation
    # - Business rule validation
    
    if errors:
        raise EntityValidationError(entity_type, errors)


__all__ = [
    "EntitySchema",
    "ENTITY_SCHEMAS",
    "get_entity_schema",
    "validate_entity_type",
    "get_all_entity_types",
    "validate_entity_data",
    "EntityValidationError",
]

