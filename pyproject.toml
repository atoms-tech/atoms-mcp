[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "atoms-mcp"
version = "0.1.0"
description = "Atoms MCP - Model Context Protocol server for Atoms platform"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Atoms Team", email = "support@atoms.tech"}
]
keywords = ["mcp", "model-context-protocol", "atoms", "ai", "llm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    # Core dependencies loaded from requirements.txt
]

[project.optional-dependencies]
dev = [
    # Linting & Formatting
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",

    # Type stubs
    "types-requests",
    "types-python-dateutil",

    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",

    # Performance & Benchmarking
    "pytest-benchmark>=4.0.0",
    "pytest-profiling>=1.7.0",
    "memory-profiler>=0.61.0",
    "locust>=2.20.0",

    # Code Quality
    "radon>=6.0.1",
    "xenon>=0.9.1",
    "pylint>=3.0.0",
    "prospector>=1.10.0",
    "vulture>=2.10",
    "interrogate>=1.5.0",
    "semgrep>=1.50.0",

    # Dependency Analysis
    "pipdeptree>=2.13.0",
    "pip-audit>=2.6.0",
    "pip-licenses>=4.3.0",
    "pydeps>=1.12.0",

    # Pre-commit
    "pre-commit>=3.5.0",
]

[project.scripts]
atoms = "atoms_mcp:main"

[project.urls]
Homepage = "https://atoms.tech"
Documentation = "https://github.com/atoms-tech/atoms-mcp"
Repository = "https://github.com/atoms-tech/atoms-mcp"
Issues = "https://github.com/atoms-tech/atoms-mcp/issues"

# ============================================================================
# Ruff Configuration (Replaces flake8, isort, and more)
# ============================================================================
[tool.ruff]
target-version = "py311"
line-length = 100
indent-width = 4

# Exclude directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    "pheno_vendor",
    "lib-sdks",
    "archive",
    "migrations",
]

[tool.ruff.lint]
# Enable rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate (commented-out code)
    "PL",     # pylint
    "TRY",    # tryceratops
    "RUF",    # ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",    # line too long (handled by formatter)
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "TRY003",  # long exception messages
    "EM101",   # raw string in exception
    "EM102",   # f-string in exception
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]  # Allow unused imports in __init__.py
"tests/**/*.py" = ["ARG", "PLR2004", "S101"]  # Allow test-specific patterns
"scripts/**/*.py" = ["T201"]  # Allow print in scripts

[tool.ruff.lint.isort]
known-first-party = ["atoms_mcp", "lib", "server", "tools", "utils"]
known-third-party = ["deploy_kit", "db_kit", "mcp_qa"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# ============================================================================
# Black Configuration (Backup formatter)
# ============================================================================
[tool.black]
line-length = 100
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | __pycache__
  | build
  | dist
  | \.egg-info
  | pheno_vendor
  | lib-sdks
  | archive
)/
'''

# ============================================================================
# isort Configuration (Backup import sorter)
# ============================================================================
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    "*/pheno_vendor/*",
    "*/lib-sdks/*",
    "*/archive/*",
    "*/__pycache__/*",
]
known_first_party = ["atoms_mcp", "lib", "server", "tools", "utils"]
known_third_party = ["deploy_kit", "db_kit", "mcp_qa"]

# ============================================================================
# MyPy Configuration
# ============================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable
disallow_any_generics = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Exclude directories
exclude = [
    "pheno_vendor/",
    "lib-sdks/",
    "archive/",
    "build/",
    "dist/",
]

[[tool.mypy.overrides]]
module = [
    "deploy_kit.*",
    "db_kit.*",
    "mcp_qa.*",
    "kinfra.*",
    "pydevkit.*",
]
ignore_missing_imports = true

# ============================================================================
# Pytest Configuration
# ============================================================================
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
    "--tb=short",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "auth: marks tests that require authentication",
    "db: marks tests that require database",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ============================================================================
# Coverage Configuration
# ============================================================================
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/pheno_vendor/*",
    "*/lib-sdks/*",
    "*/archive/*",
    "*/.venv/*",
    "*/migrations/*",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

